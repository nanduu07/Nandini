import java.sql.*;

public class Main {
    public static void main(String[] args) {
        String url = "jdbc:h2:mem:testdb"; // Using H2 in-memory DB for demo
        String user = "sa";
        String pass = "";

        try (Connection conn = DriverManager.getConnection(url, user, pass);
             Statement stmt = conn.createStatement()) {

            // Create FeePayments table
            stmt.execute("CREATE TABLE FeePayments (" +
                    "payment_id INT PRIMARY KEY, " +
                    "student_name VARCHAR(100) NOT NULL, " +
                    "amount DECIMAL(10,2) CHECK (amount > 0), " +
                    "payment_date DATE NOT NULL)");

            // --- PART A: Successful inserts and commit ---
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO FeePayments VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 1); ps.setString(2, "Ashish"); ps.setDouble(3, 5000); ps.setDate(4, Date.valueOf("2024-06-01")); ps.executeUpdate();
                ps.setInt(1, 2); ps.setString(2, "Smaran"); ps.setDouble(3, 4500); ps.setDate(4, Date.valueOf("2024-06-02")); ps.executeUpdate();
                ps.setInt(1, 3); ps.setString(2, "Vaibhav"); ps.setDouble(3, 5500); ps.setDate(4, Date.valueOf("2024-06-03")); ps.executeUpdate();
                conn.commit();
                System.out.println("Part A committed:");
                printTable(conn);
            }

            // --- PART B: Failure → rollback ---
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO FeePayments VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 4); ps.setString(2, "Kiran"); ps.setDouble(3, 6000); ps.setDate(4, Date.valueOf("2024-06-04")); ps.executeUpdate();
                // Duplicate ID + negative amount → will fail
                ps.setInt(1, 1); ps.setString(2, "Ashish"); ps.setDouble(3, -1000); ps.setDate(4, Date.valueOf("2024-06-05")); ps.executeUpdate();
                conn.commit();
            } catch (Exception e) {
                conn.rollback();
                System.out.println("Part B rolled back (failure detected).");
            }
            printTable(conn);

            // --- PART C: Partial failure → rollback ---
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO FeePayments VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 5); ps.setString(2, "Raj"); ps.setDouble(3, 7000); ps.setDate(4, Date.valueOf("2024-06-06")); ps.executeUpdate();
                // Invalid NULL student name → fail
                ps.setInt(1, 6); ps.setNull(2, Types.VARCHAR); ps.setDouble(3, 4000); ps.setDate(4, Date.valueOf("2024-06-07")); ps.executeUpdate();
                conn.commit();
            } catch (Exception e) {
                conn.rollback();
                System.out.println("Part C rolled back (partial failure).");
            }
            printTable(conn);

            // --- PART D: ACID compliance ---
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO FeePayments VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 7); ps.setString(2, "Meena"); ps.setDouble(3, 8000); ps.setDate(4, Date.valueOf("2024-06-08")); ps.executeUpdate();
                // Duplicate ID 2 → fail
                ps.setInt(1, 2); ps.setString(2, "Duplicate"); ps.setDouble(3, 9000); ps.setDate(4, Date.valueOf("2024-06-09")); ps.executeUpdate();
                conn.commit();
            } catch (Exception e) {
                conn.rollback();
                System.out.println("Part D rollback (duplicate detected).");
            }

            // Another valid transaction
            conn.setAutoCommit(false);
            try (PreparedStatement ps = conn.prepareStatement(
                    "INSERT INTO FeePayments VALUES (?, ?, ?, ?)")) {
                ps.setInt(1, 8); ps.setString(2, "Ravi"); ps.setDouble(3, 7500); ps.setDate(4, Date.valueOf("2024-06-10")); ps.executeUpdate();
                conn.commit();
                System.out.println("Part D committed (valid insert).");
            }

            printTable(conn);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Utility to print table content
    private static void printTable(Connection conn) throws SQLException {
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM FeePayments ORDER BY payment_id")) {
            while (rs.next()) {
                System.out.println(rs.getInt(1) + "\t" +
                                   rs.getString(2) + "\t" +
                                   rs.getDouble(3) + "\t" +
                                   rs.getDate(4));
            }
            System.out.println("----");
        }
    }
}
